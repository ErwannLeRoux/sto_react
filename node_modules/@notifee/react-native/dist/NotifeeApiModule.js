"use strict";
/*
 * Copyright (c) 2016-present Invertase Limited
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_native_1 = require("react-native");
const NotifeeNativeModule_1 = __importDefault(require("./NotifeeNativeModule"));
const utils_1 = require("./utils");
const validateNotification_1 = __importDefault(require("./validators/validateNotification"));
const validateAndroidChannel_1 = __importDefault(require("./validators/validateAndroidChannel"));
const validateAndroidChannelGroup_1 = __importDefault(require("./validators/validateAndroidChannelGroup"));
const validateIOSCategory_1 = __importDefault(require("./validators/validateIOSCategory"));
const validateIOSPermissions_1 = __importDefault(require("./validators/validateIOSPermissions"));
let onNotificationEventHeadlessTaskRegistered = false;
let registeredForegroundServiceTask;
class NotifeeApiModule extends NotifeeNativeModule_1.default {
    constructor(config) {
        super(config);
        react_native_1.AppRegistry.registerHeadlessTask(this.native.FOREGROUND_NOTIFICATION_TASK_KEY, () => {
            if (!registeredForegroundServiceTask) {
                console.warn('[notifee] no registered foreground service has been set for displaying a foreground notification.');
                return () => Promise.resolve();
            }
            return ({ notification }) => registeredForegroundServiceTask(notification);
        });
    }
    cancelAllNotifications() {
        return this.native.cancelAllNotifications();
    }
    cancelNotification(notificationId) {
        if (!utils_1.isString(notificationId)) {
            throw new Error("notifee.cancelNotification(*) 'notificationId' expected a string value.");
        }
        return this.native.cancelNotification(notificationId);
    }
    createCategory(category) {
        let options;
        try {
            options = validateIOSCategory_1.default(category);
        }
        catch (e) {
            throw new Error(`notifee.createCategory(*) ${e.message}`);
        }
        if (utils_1.isAndroid) {
            return Promise.resolve('');
        }
        return this.native.createCategory(options);
    }
    createChannel(channel) {
        let options;
        try {
            options = validateAndroidChannel_1.default(channel);
        }
        catch (e) {
            throw new Error(`notifee.createChannel(*) ${e.message}`);
        }
        if (utils_1.isIOS) {
            return Promise.resolve('');
        }
        if (this.native.ANDROID_API_LEVEL < 26) {
            return Promise.resolve(options.id);
        }
        return this.native.createChannel(options).then(() => {
            return options.id;
        });
    }
    createChannels(channels) {
        if (!utils_1.isArray(channels)) {
            throw new Error("notifee.createChannels(*) 'channels' expected an array of AndroidChannel.");
        }
        const options = [];
        try {
            for (let i = 0; i < channels.length; i++) {
                options[i] = validateAndroidChannel_1.default(channels[i]);
            }
        }
        catch (e) {
            throw new Error(`notifee.createChannels(*) 'channels' a channel is invalid: ${e.message}`);
        }
        if (utils_1.isIOS || this.native.ANDROID_API_LEVEL < 26) {
            return Promise.resolve();
        }
        return this.native.createChannels(options);
    }
    createChannelGroup(channelGroup) {
        let options;
        try {
            options = validateAndroidChannelGroup_1.default(channelGroup);
        }
        catch (e) {
            throw new Error(`notifee.createChannelGroup(*) ${e.message}`);
        }
        if (this.native.ANDROID_API_LEVEL < 26) {
            return Promise.resolve(options.id);
        }
        if (utils_1.isIOS) {
            return Promise.resolve('');
        }
        return this.native.createChannelGroup(options).then(() => {
            return options.id;
        });
    }
    createChannelGroups(channelGroups) {
        if (!utils_1.isArray(channelGroups)) {
            throw new Error("notifee.createChannelGroups(*) 'channelGroups' expected an array of AndroidChannelGroup.");
        }
        const options = [];
        try {
            for (let i = 0; i < channelGroups.length; i++) {
                options[i] = validateAndroidChannelGroup_1.default(channelGroups[i]);
            }
        }
        catch (e) {
            throw new Error(`notifee.createChannelGroups(*) 'channelGroups' a channel group is invalid: ${e.message}`);
        }
        if (utils_1.isIOS || this.native.ANDROID_API_LEVEL < 26) {
            return Promise.resolve();
        }
        return this.native.createChannelGroups(options);
    }
    deleteChannel(channelId) {
        if (!utils_1.isString(channelId)) {
            throw new Error("notifee.deleteChannel(*) 'channelId' expected a string value.");
        }
        if (utils_1.isIOS || this.native.ANDROID_API_LEVEL < 26) {
            return Promise.resolve();
        }
        return this.native.deleteChannel(channelId);
    }
    deleteChannelGroup(channelGroupId) {
        if (!utils_1.isString(channelGroupId)) {
            throw new Error("notifee.deleteChannelGroup(*) 'channelGroupId' expected a string value.");
        }
        if (utils_1.isIOS || this.native.ANDROID_API_LEVEL < 26) {
            return Promise.resolve();
        }
        return this.native.deleteChannelGroup(channelGroupId);
    }
    displayNotification(notification) {
        let options;
        try {
            options = validateNotification_1.default(notification);
        }
        catch (e) {
            throw new Error(`notifee.displayNotification(*) ${e.message}`);
        }
        return this.native.displayNotification(options).then(() => {
            return options.id;
        });
    }
    getChannel(channelId) {
        if (!utils_1.isString(channelId)) {
            throw new Error("notifee.getChannel(*) 'channelId' expected a string value.");
        }
        if (utils_1.isIOS || this.native.ANDROID_API_LEVEL < 26) {
            return Promise.resolve(null);
        }
        return this.native.getChannel(channelId);
    }
    getChannels() {
        if (utils_1.isIOS || this.native.ANDROID_API_LEVEL < 26) {
            return Promise.resolve([]);
        }
        return this.native.getChannels();
    }
    getChannelGroup(channelGroupId) {
        if (!utils_1.isString(channelGroupId)) {
            throw new Error("notifee.getChannelGroup(*) 'channelGroupId' expected a string value.");
        }
        if (utils_1.isIOS || this.native.ANDROID_API_LEVEL < 26) {
            return Promise.resolve(null);
        }
        return this.native.getChannelGroup(channelGroupId);
    }
    getChannelGroups() {
        if (utils_1.isIOS || this.native.ANDROID_API_LEVEL < 26) {
            return Promise.resolve([]);
        }
        return this.native.getChannelGroups();
    }
    getInitialNotification() {
        return this.native.getInitialNotification();
    }
    onBackgroundEvent(observer) {
        if (!utils_1.isFunction(observer)) {
            throw new Error("notifee.onBackgroundEvent(*) 'observer' expected a function.");
        }
        if (utils_1.isAndroid && !onNotificationEventHeadlessTaskRegistered) {
            react_native_1.AppRegistry.registerHeadlessTask(this.native.NOTIFICATION_EVENT_KEY, () => {
                return ({ type, detail }) => {
                    return observer({ type, detail });
                };
            });
            onNotificationEventHeadlessTaskRegistered = true;
        }
    }
    onForegroundEvent(observer) {
        if (!utils_1.isFunction(observer)) {
            throw new Error("notifee.onForegroundEvent(*) 'observer' expected a function.");
        }
        const subscriber = this.emitter.addListener(this.native.NOTIFICATION_EVENT_KEY, ({ type, detail }) => {
            observer({ type, detail });
        });
        return () => {
            subscriber.remove();
        };
    }
    openNotificationSettings(channelId) {
        if (!utils_1.isUndefined(channelId) && !utils_1.isString(channelId)) {
            throw new Error("notifee.openNotificationSettings(*) 'channelId' expected a string value.");
        }
        if (utils_1.isIOS) {
            return Promise.resolve();
        }
        return this.native.openNotificationSettings(channelId || null);
    }
    requestPermission(permissions) {
        if (utils_1.isAndroid) {
            return Promise.resolve(true);
        }
        let options;
        try {
            options = validateIOSPermissions_1.default(permissions);
        }
        catch (e) {
            throw new Error(`notifee.requestPermission(*) ${e.message}`);
        }
        return this.native.requestPermission(options);
    }
    registerForegroundService(runner) {
        if (!utils_1.isFunction(runner)) {
            throw new Error("notifee.registerForegroundService(_) 'runner' expected a function.");
        }
        if (utils_1.isIOS) {
            return;
        }
        registeredForegroundServiceTask = runner;
    }
}
exports.default = NotifeeApiModule;
//# sourceMappingURL=NotifeeApiModule.js.map